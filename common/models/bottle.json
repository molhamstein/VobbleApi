{
  "name": "bottle",
  "base": "PersistedModel",
  "idInjection": true,
  "options": {
    "validateUpsert": true
  },
  "scope": {
    "include": [{
        "relation": "owner"
      },
      {
        "relation": "shore"
      },
      {
        "relation": "topics"
      }
    ]
  },
  "properties": {
    "file": {
      "type": "string",
      "required": true
    },
    "status": {
      "type": "string",
      "required": true,
      "default": "active"
    },
    "thumbnail": {
      "type": "string",
      "required": false
    },
    "createdAt": {
      "type": "date",
      "required": true,
      "defaultFn": "now"
    },
    "weight": {
      "type": "number"
    },
    "totalWeight": {
      "type": "number",
      "default": -1e+23
    },
    "repliesUserCount": {
      "type": "number",
      "default": 0
    },
    "bottleViewCount": {
      "type": "number",
      "default": 0
    },
    "bottleCompleteCount": {
      "type": "number",
      "default": 0
    },
    "addedScores": {
      "type": "number",
      "default": 0
    },
    "bottleType": {
      "type": "string",
      "default": "video"
    },
    "viewStatus": {
      "type": "string",
      "default": "deactive"
    }
  },
  "validations": [],
  "relations": {
    "shore": {
      "type": "belongsTo",
      "model": "shore",
      "foreignKey": "shoreId"
    },
    "owner": {
      "type": "belongsTo",
      "model": "user",
      "foreignKey": "ownerId"
    },
    "topics": {
      "type": "belongsTo",
      "model": "topics",
      "foreignKey": "topicId",
      "options": {
        "nestRemoting": true
      }
    },
    "userComplete": {
      "type": "hasMany",
      "model": "bottleUserComplete",
      "foreignKey": "bottleId",
      "options": {
        "nestRemoting": true
      }
    },
    "userSeen": {
      "type": "hasMany",
      "model": "bottleUserseen",
      "foreignKey": "bottleId",
      "options": {
        "nestRemoting": true
      }
    },
    "userReplaies": {
      "type": "hasMany",
      "model": "replies",
      "foreignKey": "bottleId",
      "options": {
        "nestRemoting": true
      }
    }
  },
  "acls": [{
      "accessType": "*",
      "principalType": "ROLE",
      "principalId": "$everyone",
      "permission": "DENY"
    },
    {
      "principalType": "ROLE",
      "principalId": "$everyone",
      "permission": "ALLOW",
      "property": "findById"
    },
    {
      "principalType": "ROLE",
      "principalId": "$authenticated",
      "permission": "ALLOW",
      "property": "getOneBottle"
    },
    {
      "principalType": "ROLE",
      "principalId": "$authenticated",
      "permission": "ALLOW",
      "property": "getBottle"
    },
    {
      "principalType": "ROLE",
      "principalId": "$authenticated",
      "permission": "ALLOW",
      "property": "getBottleById"
    },
    {
      "principalType": "ROLE",
      "principalId": "$authenticated",
      "permission": "ALLOW",
      "property": "getOneBottleTest"
    },
    {
      "principalType": "ROLE",
      "principalId": "$authenticated",
      "permission": "ALLOW",
      "property": "recommendationTest"
    },
    {
      "principalType": "ROLE",
      "principalId": "admin",
      "permission": "ALLOW",
      "property": "deactiveBottle"
    },
    {
      "principalType": "ROLE",
      "principalId": "$authenticated",
      "permission": "ALLOW",
      "property": "create"
    },
    {
      "accessType": "*",
      "principalType": "ROLE",
      "principalId": "$owner",
      "permission": "ALLOW"
    },
    {
      "accessType": "*",
      "principalType": "ROLE",
      "principalId": "admin",
      "permission": "ALLOW"
    }
  ],
  "methods": {
    "getOneBottle": {
      "accepts": [{
          "arg": "gender",
          "type": "string",
          "required": false,
          "description": "gender of owner bottle"
        },
        {
          "arg": "ISOCode",
          "type": "string",
          "required": false,
          "description": "ISOCode of owner bottle"
        },
        {
          "arg": "shoreId",
          "type": "string",
          "required": false,
          "description": "shore id of  bottle"
        },
        {
          "arg": "req",
          "type": "object",
          "http": {
            "source": "req"
          }
        }
      ],
      "returns": [{
        "arg": "result",
        "type": "object",
        "root": true,
        "description": ""
      }],
      "description": "get one mthode with some logic",
      "http": [{
        "path": "/getOneBottle",
        "verb": "get"
      }]
    },
    "getBottle": {
      "accepts": [{
          "arg": "gender",
          "type": "string",
          "required": false,
          "description": "gender of owner bottle"
        },
        {
          "arg": "ISOCode",
          "type": "string",
          "required": false,
          "description": "ISOCode of owner bottle"
        },
        {
          "arg": "shoreId",
          "type": "string",
          "required": false,
          "description": "shore id of  bottle"
        },
        {
          "arg": "bottleType",
          "type": "string",
          "required": false,
          "description": "type of  bottle"
        },
        {
          "arg": "offsets",
          "type": "number",
          "required": false,
          "description": "offsets"
        },
        {
          "arg": "limit",
          "type": "number",
          "required": false,
          "description": "limit"
        },
        {
          "arg": "seen",
          "type": "array",
          "required": false,
          "description": "Seen Bottle Array"
        },
        {
          "arg": "complete",
          "type": "array",
          "required": false,
          "description": "Complete Bottle Array"
        },
        {
          "arg": "req",
          "type": "object",
          "http": {
            "source": "req"
          }
        }
      ],
      "returns": [{
        "arg": "result",
        "type": "object",
        "root": true,
        "description": ""
      }],
      "description": "get page of bottle",
      "http": [{
        "path": "/getBottle",
        "verb": "get"
      }]
    },
    "getBottleById": {
      "accepts": [{
          "arg": "id",
          "type": "string",
          "required": true,
          "description": "id of bottle",
          "http": {
            "source": "path"
          }
        },
        {
          "arg": "req",
          "type": "object",
          "http": {
            "source": "req"
          }
        }
      ],
      "returns": [{
        "arg": "result",
        "type": "object",
        "root": true,
        "description": ""
      }],
      "description": "get bottle by id",
      "http": [{
        "path": "/getBottleById/:id",
        "verb": "get"
      }]
    },
    "getOneBottleTest": {
      "accepts": [{
          "arg": "gender",
          "type": "string",
          "required": false,
          "description": "gender of owner bottle"
        },
        {
          "arg": "ISOCode",
          "type": "string",
          "required": false,
          "description": "ISOCode of owner bottle"
        },
        {
          "arg": "shoreId",
          "type": "string",
          "required": false,
          "description": "shore id of  bottle"
        },
        {
          "arg": "userId",
          "type": "string",
          "required": false,
          "description": "user id"
        },
        {
          "arg": "req",
          "type": "object",
          "http": {
            "source": "req"
          }
        }
      ],
      "returns": [{
        "arg": "result",
        "type": "object",
        "root": true,
        "description": ""
      }],
      "description": "get one mthode with some logic",
      "http": [{
        "path": "/getOneBottleTest",
        "verb": "get"
      }]
    },
    "recommendationTest": {
      "accepts": [],
      "returns": [{
        "arg": "result",
        "type": "object",
        "root": true,
        "description": ""
      }],
      "description": "get one mthode with some logic",
      "http": [{
        "path": "/recommendationTest",
        "verb": "get"
      }]
    },
    "countFilter": {
      "accepts": [{
        "arg": "filter",
        "type": "object",
        "required": true,
        "description": "filter item"
      }],
      "returns": [{
        "arg": "result",
        "type": "object",
        "root": true,
        "description": ""
      }],
      "description": "",
      "http": [{
        "path": "/countBottle",
        "verb": "get"
      }]
    },
    "getFilterBottle": {
      "accepts": [{
        "arg": "filter",
        "type": "object",
        "required": false,
        "description": "filter bottle"
      }],
      "returns": [{
        "arg": "result",
        "type": "object",
        "root": true,
        "description": ""
      }],
      "description": "filter On the bottle",
      "http": [{
        "path": "/filterBottle",
        "verb": "get"
      }]
    },
    "deactiveBottle": {
      "accepts": [{
        "arg": "id",
        "type": "string",
        "required": true,
        "description": "",
        "http": {
          "source": "path"
        }
      }, {
        "arg": "deleteFile",
        "type": "boolean",
        "required": false,
        "description": ""
      }],
      "returns": [],
      "description": "",
      "http": [{
        "path": "/:id/deactiveBottle",
        "verb": "delete"
      }]
    },
    "timeStateReport": {
      "accepts": [{
          "arg": "from",
          "type": "date",
          "required": false,
          "description": ""
        },
        {
          "arg": "to",
          "type": "date",
          "required": false,
          "description": ""
        },
        {
          "arg": "country",
          "type": "string",
          "required": false,
          "description": ""
        }
      ],
      "returns": [{
        "arg": "result",
        "type": "object",
        "root": true,
        "description": ""
      }],
      "description": "report as time",
      "http": [{
        "path": "/timeStateReport",
        "verb": "get"
      }]
    },
    "timeStateExport": {
      "accepts": [{
          "arg": "from",
          "type": "date",
          "required": false,
          "description": ""
        },
        {
          "arg": "to",
          "type": "date",
          "required": false,
          "description": ""
        },
        {
          "arg": "country",
          "type": "string",
          "required": false,
          "description": ""
        }
      ],
      "returns": [{
        "arg": "result",
        "type": "object",
        "root": true,
        "description": ""
      }],
      "description": "Export as time",
      "http": [{
        "path": "/timeStateExport",
        "verb": "get"
      }]
    },
    "export": {
      "accepts": [{
        "arg": "filter",
        "type": "object",
        "required": false,
        "description": "filter Item"
      }],
      "returns": [{
        "arg": "result",
        "type": "object",
        "root": true,
        "description": ""
      }],
      "description": "Export To Excel",
      "http": [{
        "path": "/export",
        "verb": "get"
      }]
    },
    "typeStateReport": {
      "accepts": [{
          "arg": "from",
          "type": "date",
          "required": false,
          "description": ""
        },
        {
          "arg": "to",
          "type": "date",
          "required": false,
          "description": ""
        }
      ],
      "returns": [{
        "arg": "result",
        "type": "object",
        "root": true,
        "description": ""
      }],
      "description": "",
      "http": [{
        "path": "/typeStateReport",
        "verb": "get"
      }]
    },
    "makeBottleViewStatus": {
      "accepts": [{
        "arg": "bottles",
        "type": ["string"],
        "required": true,
        "description": ""
      }],
      "returns": [{
        "arg": "result",
        "type": "object",
        "root": true,
        "description": ""
      }],
      "description": "",
      "http": [{
        "path": "/makeBottleViewStatus",
        "verb": "put"
      }]
    }

  }
}
